##we pass, port 0 it mens we can implement the load balancer
server.port=0

# server all microservice all place here so without port & URL they can communicate each other
app.eureka-server=localhost
eureka.client.serviceUrl.defaultZone=http://admin:admin@${app.eureka-server}:8761/eureka

#eureka instance will register with ip-address instead of hostname
eureka.instance.preferIpAddress=true


spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/order_service
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update


#Distributed Tracing Zipkin brave to tracking the whole request
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability= 1.0

# Resilinece4j Properties [use can use actuator url to see the details]
#show the indicator in portal is half open,open,close
resilience4j.circuitbreaker.instances.inventory.registerHealthIndicator=true
#after 10 request failing it going to change the state
resilience4j.circuitbreaker.instances.inventory.event-consumer-buffer-size=10
#use count base algorithm  to validate request
resilience4j.circuitbreaker.instances.inventory.slidingWindowType=COUNT_BASED
#when state is OPEN the back to back 5 request is correct the move the state to CLOSE
resilience4j.circuitbreaker.instances.inventory.slidingWindowSize=5
#resio of failing the request i.e.50%
resilience4j.circuitbreaker.instances.inventory.failureRateThreshold=50
#waiting for response till 5s after that fallback method will call
resilience4j.circuitbreaker.instances.inventory.waitDurationInOpenState=5s
#how many call will allow in half open state
resilience4j.circuitbreaker.instances.inventory.permittedNumberOfCallsInHalfOpenState=3
#automaticaly change the states
resilience4j.circuitbreaker.instances.inventory.automaticTransitionFromOpenToHalfOpenEnabled=true

#Resilience4J Timeout Properties
#wait for 5 sec if response not get then throw the timeout error
resilience4j.timelimiter.instances.inventory.timeout-duration=3s

#Resilience4J Retry Properties
# attempt to retry when it's call fail
resilience4j.retry.instances.inventory.max-attempts=3
#interval of next retry attempt
resilience4j.retry.instances.inventory.wait-duration=5s


# Kafka Properties
#kafka docker container url
spring.kafka.producer.bootstrap-servers=localhost:9092
#message default topic
spring.kafka.template.default-topic=notificationTopic
#convet key into bite code as serializer to send on internet
spring.kafka.producer.key-serializer=org.apache.kafka.common.serialization.StringSerializer
#convet value into bite code as serializer to send on internet
spring.kafka.producer.value-serializer=org.springframework.kafka.support.serializer.JsonSerializer
##Mapping class for serialize to deserializes
spring.kafka.producer.properties.spring.json.type.mapping=event:com.micro.order.event.OrderPlacedEvent
logging.pattern.level=%5p [${spring.application.name:},%X{traceId:-},%X{spanId:-}]


# Actuator Prometheus Endpoint
management.endpoints.web.exposure.include= prometheus