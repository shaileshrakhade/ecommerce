spring.application.name=INVENTORY-SERVICE
##we pass, port 0 it mens we can implement the load balancer
server.port=0

# server all microservice all place here so without port & URL they can communicate each other
app.eureka-server=localhost
eureka.client.serviceUrl.defaultZone=http://admin:admin@${app.eureka-server}:8761/eureka

#eureka instance will register with ip-address instead of hostname
eureka.instance.preferIpAddress=true

spring.datasource.driver-class-name=com.mysql.cj.jdbc.Driver
spring.datasource.url=jdbc:mysql://localhost:3306/inventory_service
spring.datasource.username=root
spring.datasource.password=root
spring.jpa.hibernate.ddl-auto=update
#spring.jpa.hibernate.ddl-auto=create-drop

#spring.datasource.driver-class-name=org.postgresql.Driver
#spring.datasource.url=jdbc:postgresql://localhost:5432/inventory-service
#spring.datasource.username=root
#spring.datasource.password=root
#spring.jpa.hibernate.ddl-auto=update


#Distributed Tracing Zipkin brave to tracking the whole request
# use ca tract the system using http://localhost:9411/zipkin/
#this was running from docker container [docker run -d -p 9411:9411 openzipkin/zipkin]
management.zipkin.tracing.endpoint=http://localhost:9411/api/v2/spans
management.tracing.sampling.probability= 1.0


# Actuator Prometheus Endpoint
management.endpoints.web.exposure.include= prometheus