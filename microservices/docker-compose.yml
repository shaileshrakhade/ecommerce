# mvn jib:build
# command to run this file [docker compose up -d]
# to pull the updated  images [docker-compose pull]
# docker log -f [container name]
#to access it outside of container i.e. local machine  [docker exec -it test-mysql bash][mysql -u root -p]

---
version: '3.7'
services:
  ## when we use  postgres db
  postgres-order:
    container_name: postgres-inventory
    image: postgres
    environment:
      POSTGRES_DB: inventory-service
      POSTGRES_USER: root
      POSTGRES_PASSWORD: root
      PGDATA: /data/postgres
    volumes:
      - ./DockerVolumes/postgres-inventory:/data/postgres
    expose:
      - "5432"
    ports:
      - "5432:5431"
    command: -p 5431
    restart: always

  ## MySQL Docker Compose Config
  # for the auth service
  mysql-auth:
    container_name: mysql-auth
    image: mysql
    environment:
      MYSQL_DATABASE: auth-service
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./DockerVolumes/mysql-auth:/var/lib/mysql
    ports:
      - "33061:3306"
    expose:
      - "3306"
    restart: always
  ## postgres Docker Compose Config
  # for the order service
  mysql-inventory:
    container_name: mysql-inventory
    image: mysql
    environment:
      MYSQL_DATABASE: inventory-service
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./DockerVolumes/mysql-inventory:/var/lib/mysql
    ports:
      - "33062:3306"
    expose:
      - "3306"
    restart: always
# for the inventory - service
  mysql-order:
    container_name: mysql-order
    image: mysql
    environment:
      MYSQL_DATABASE: order-service
      MYSQL_USER: mysql
      MYSQL_PASSWORD: mysql
      MYSQL_ROOT_PASSWORD: root
    volumes:
      - ./DockerVolumes/mysql-order:/var/lib/mysql
    ports:
      - "33063:3306"
    expose:
      - "3306"
    restart: always

  ## Mongo Docker Compose Config
  mongo:
      container_name: mongo-product
      image: mongo:4.4.14-rc0-focal
      restart: always
      ports:
        - "27017:27017"
      expose:
        - "27017"
      volumes:
        - ./DockerVolumes/mongo-data:/data/db


##  zookeeper send heart-bit to receive message from broker
#  zookeeper:
#    image: confluentinc/cp-zookeeper:7.0.1
#    container_name: zookeeper
#    ports:
#      - "2181:2181"
#    environment:
#      ZOOKEEPER_CLIENT_PORT: 2181
#      ZOOKEEPER_TICK_TIME: 2000
#
#  broker:
#    image: confluentinc/cp-kafka:7.0.1
#    container_name: broker
#    ports:
#      - "9092:9092"
#    depends_on:
#      - zookeeper
#    environment:
#      KAFKA_BROKER_ID: 1
#      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
#      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_INTERNAL:PLAINTEXT
#      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092,PLAINTEXT_INTERNAL://broker:29092
#      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
#      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
#      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
#
#  ## Zipkin distributed tracing system.
#  ##  It helps gather timing data needed to troubleshoot latency problems
#  ##  in service architectures we can track the call hierarchy.
  zipkin:
    image: openzipkin/zipkin
    container_name: zipkin
    ports:
      - "9411:9411"


  ## Eureka Server
  discovery-server:
      image: shaileshrakhade/discovery-server:latest
      container_name: discovery-server
      ports:
        - "8761:8761"
      expose:
        - "8761"
      environment:
        - SPRING_PROFILES_ACTIVE=docker
#      depends_on:
#        - zipkin

  ## API Gateway
  api-gateway:
    image: shaileshrakhade/api-gateway:latest
    container_name: api-gateway
    ports:
      - "8181:8080"
    expose:
      - "8181"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      - LOGGING_LEVEL_ORG_SPRINGFRAMEWORK_SECURITY= TRACE
    depends_on:
      - zipkin
      - discovery-server

  ## Auth-Service Docker Compose Config
  authentication-service:
    container_name: authentication-service
    image: shaileshrakhade/authentication-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:mysql://mysql-auth:3307/auth-service
    depends_on:
      - mysql-auth
#      - zipkin
      - discovery-server
      - api-gateway

    ## Product-Service Docker Compose Config

  ##product service
  product-service:
      container_name: product-service
      image: shaileshrakhade/product-service:latest
      environment:
        - SPRING_PROFILES_ACTIVE=docker
      depends_on:
        - mongo
        - discovery-server
        - api-gateway

  ## Order-Service Docker Compose Config
  order-service:
    container_name: order-service
    image: shaileshrakhade/order-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - option if we want to override from property file we can pass as command
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-order:5431/order-service
    depends_on:
      - mysql-order
#      - broker
#      - zipkin
      - discovery-server
      - api-gateway

  ## Inventory-Service Docker Compose Config
  inventory-service:
    container_name: inventory-service
    image: shaileshrakhade/inventory-service:latest
    environment:
      - SPRING_PROFILES_ACTIVE=docker
#      - SPRING_DATASOURCE_URL=jdbc:postgresql://postgres-inventory:5432/inventory-service
    depends_on:
      - mysql-inventory
      - discovery-server
      - api-gateway

#  ## Notification-Service Docker Compose Config
#  notification-service:
#    container_name: notification-service
#    image: shaileshrakhade/notification-service:latest
#    environment:
#      - SPRING_PROFILES_ACTIVE=docker
#    depends_on:
#      - zipkin
#      - broker
#      - discovery-server
#      - api-gateway
#
#
#  ## Prometheus is use the actuator endpoint for better matrix of application
#  prometheus:
#    image: prom/prometheus:v2.37.1
#    container_name: prometheus
#    restart: always
#    ports:
#      - "9090:9090"
#    volumes:
##      - copy the file from host machine to container
#      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml
#    depends_on:
#      - product-service
#      - inventory-service
#      - order-service
#      - notification-service
#      - authentication-service
#
#  ## grafana is  use Prometheus endpoint & show the matrix of application
#  grafana:
#    image: grafana/grafana-oss:8.5.2
#    container_name: grafana
#    restart: always
#    ports:
#      - "3000:3000"
#    links:
#      - prometheus:prometheus
#    volumes:
#      - ./DockerVolumes/grafana:/var/lib/grafana
#    environment:
#      - GF_SECURITY_ADMIN_USER=admin
#      - GF_SECURITY_ADMIN_PASSWORD=admin